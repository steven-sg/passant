{"version":3,"sources":["components/PracticeBoard.jsx","components/DisplayBoard.jsx","components/ScoreBoard.jsx","components/ScoreTable.jsx","components/HighScoreBoard.jsx","components/RecentScoreBoard.jsx","components/QuestionBoard.jsx","components/TimerBoard.jsx","components/SidePanel.jsx","components/OptionsBar.jsx","components/ControlCentre.jsx","App.js","serviceWorker.js","index.js"],"names":["PracticeBoard","files","ranks","state","squareStyles","getLineSquares","line","_this","includes","map","r","concat","f","extractLine","square","mode","props","charAt","unhighlight","setState","highlight","highlightStyles","reduce","a","c","Object","objectSpread","defineProperty","background","_ref","handleClick","checkAnswer","this","react_default","createElement","chessboard_min_default","draggable","onMouseOverSquare","onMouseOutSquare","onSquareClick","Component","BigText","styled","div","_templateObject","DisplayBoard","header","text","Segment","Group","attached","Header","as","padded","ScoreBoard","score","components_DisplayBoard","toString","dateFormatOptions","year","month","day","hour","minute","hour12","ScoreTable","data","Table","basic","Body","_ref2","date","dateString","Intl","DateTimeFormat","format","Row","key","Cell","textAlign","HighScoreBoard","scoreHistory","highScores","filter","sort","b","slice","components_ScoreTable","RecentScoreBoard","recentScores","QuestionBoard","question","toUpperCase","TimerBoard","timer","timeRemaining","countDown","stopGame","prevState","clearInterval","setInterval","SidePanel","started","style","width","components_QuestionBoard","components_TimerBoard","components_ScoreBoard","length","Fragment","components_HighScoreBoard","components_RecentScoreBoard","OptionsBar","setMode","e","value","getButtonColor","active","filesActive","ranksActive","Button","size","onClick","content","color","inverted","disabled","ControlCentre","modes","generateNewQuestion","getRandomInt","generateNextQuestion","getQuestion","lineType","newMode","_this$state","max","Math","floor","random","startGame","_this$state2","Date","toConsumableArray","answer","_this$state3","_this$state4","display","gridGap","gridTemplateColumns","components_SidePanel","gridTemplateRows","Dimmer","Dimmable","dimmed","primary","components_PracticeBoard","components_OptionsBar","App","className","components_ControlCentre","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+UAqFeA,6MAhFbC,MAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,OAE5CC,MAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,OAE5CC,MAAQ,CACNC,aAAc,MAGhBC,eAAiB,SAACC,GAChB,OAAIC,EAAKN,MAAMO,SAASF,GACfC,EAAKL,MAAMO,IAAI,SAAAC,GAAC,SAAAC,OAAOL,GAAPK,OAAcD,KAEnCH,EAAKL,MAAMM,SAASF,GACfC,EAAKN,MAAMQ,IAAI,SAAAG,GAAC,SAAAD,OAAOC,GAAPD,OAAWL,UADpC,KAMFO,YAAc,SAACC,GAAW,IAChBC,EAASR,EAAKS,MAAdD,KAER,MAAa,UAATA,EACKD,EAAOG,OAAO,GAEV,UAATF,EACKD,EAAOG,OAAO,QADvB,KAMFC,YAAc,WACZX,EAAKY,SAAS,CAAEf,aAAc,QAGhCgB,UAAY,SAACN,GACX,IAAMR,EAAOC,EAAKM,YAAYC,GACxBO,EAAkBd,EAAKF,eAAeC,GAAMgB,OAChD,SAACC,EAAGC,GAAJ,OAAAC,OAAAC,EAAA,EAAAD,CAAA,GACKF,EADLE,OAAAE,EAAA,EAAAF,CAAA,GAGKD,EAAI,CACHI,WAAY,yBAIlB,IAEFrB,EAAKY,SAAS,SAAAU,GAAA,IAAGzB,EAAHyB,EAAGzB,aAAH,MAAuB,CACnCA,aAAaqB,OAAAC,EAAA,EAAAD,CAAA,GAAMrB,EAAiBiB,SAIxCS,YAAc,SAAChB,GACb,IAAMR,EAAOC,EAAKM,YAAYC,IAG9BiB,EAFwBxB,EAAKS,MAArBe,aAEIzB,4EAGL,IACCF,EAAiB4B,KAAK7B,MAAtBC,aACR,OACE6B,EAAAV,EAAAW,cAAA,WACED,EAAAV,EAAAW,cAACC,EAAAZ,EAAD,CACEa,WAAW,EACXC,kBAAmBL,KAAKZ,UACxBkB,iBAAkBN,KAAKd,YACvBqB,cAAeP,KAAKF,YACpB1B,aAAcA,YArEIoC,kLCC5B,IAAMC,SAAUC,EAAOC,IAAVC,KAyBEC,MAlBf,SAAAhB,GAAwC,IAAhBiB,EAAgBjB,EAAhBiB,OAAQC,EAAQlB,EAARkB,KAC9B,OACEd,EAAAV,EAAAW,cAACc,EAAA,EAAQC,MAAT,KACEhB,EAAAV,EAAAW,cAACc,EAAA,EAAD,CAASE,SAAS,OAChBjB,EAAAV,EAAAW,cAACiB,EAAA,EAAD,CAAQC,GAAG,MAAMN,IAEnBb,EAAAV,EAAAW,cAACc,EAAA,EAAD,CAASE,SAAS,SAASG,OAAO,QAChCpB,EAAAV,EAAAW,cAACO,EAAD,KAAUM,MCPHO,MARf,SAAAzB,GAA+B,IAAT0B,EAAS1B,EAAT0B,MACpB,OAAOtB,EAAAV,EAAAW,cAACsB,EAAD,CAAcV,OAAO,QAAQC,KAAMQ,EAAME,uBCD5CC,EAAoB,CACxBC,KAAM,UACNC,MAAO,UACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,UACRC,QAAQ,GAsCKC,MAnCf,SAAApC,GAAsC,IAAhBiB,EAAgBjB,EAAhBiB,OAAQoB,EAAQrC,EAARqC,KAC5B,OACEjC,EAAAV,EAAAW,cAACc,EAAA,EAAQC,MAAT,KACEhB,EAAAV,EAAAW,cAACc,EAAA,EAAD,CAASE,SAAS,OAChBjB,EAAAV,EAAAW,cAACiB,EAAA,EAAD,CAAQC,GAAG,MAAMN,IAEnBb,EAAAV,EAAAW,cAACc,EAAA,EAAD,CAASE,SAAS,UAChBjB,EAAAV,EAAAW,cAACiC,EAAA,EAAD,CAAOC,MAAM,QACXnC,EAAAV,EAAAW,cAACiC,EAAA,EAAME,KAAP,KAEIH,EAAKzD,IAAI,SAAA6D,GAAqB,IAAlBC,EAAkBD,EAAlBC,KAAMhB,EAAYe,EAAZf,MACViB,EAAa,IAAIC,KAAKC,eAAe,UAAWhB,GAAmBiB,OAAOJ,GAChF,OACEtC,EAAAV,EAAAW,cAACiC,EAAA,EAAMS,IAAP,CAAWC,IAAKN,GACdtC,EAAAV,EAAAW,cAACiC,EAAA,EAAMW,KAAP,CAAYC,UAAU,QAAQP,GAC9BvC,EAAAV,EAAAW,cAACiC,EAAA,EAAMW,KAAP,CAAYC,UAAU,SAASxB,WCTpCyB,MAff,SAAAnD,GAAgD,IAAtBoD,EAAsBpD,EAAtBoD,aAAclE,EAAQc,EAARd,KAGhCmE,EAFiBD,EAAaE,OAAO,SAAA5B,GAAK,OAAIA,EAAMxC,OAASA,IAC/BqE,KAAK,SAAC7D,EAAG8D,GAAJ,OAAUA,EAAE9B,MAAQhC,EAAEgC,QAC/B+B,MAAM,EAAG,GACzC,OAAOrD,EAAAV,EAAAW,cAACqD,EAAD,CAAYzC,OAAO,gBAAgBoB,KAAMgB,KCUnCM,MAdf,SAAA3D,GAAkD,IAAtBd,EAAsBc,EAAtBd,KAEpB0E,EAF0C5D,EAAhBoD,aACIE,OAAO,SAAA5B,GAAK,OAAIA,EAAMxC,OAASA,IAC/BuE,MAAM,EAAG,GAC7C,OAAOrD,EAAAV,EAAAW,cAACqD,EAAD,CAAYzC,OAAO,gBAAgBoB,KAAMuB,KCKnCC,MARf,SAAA7D,GAAqC,IAAZ8D,EAAY9D,EAAZ8D,SACvB,OAAO1D,EAAAV,EAAAW,cAACsB,EAAD,CAAcV,OAAO,WAAWC,KAAM4C,EAASC,iBCgCzCC,6MAhCbC,MAAQ,KAER3F,MAAQ,CACN4F,cAAexF,EAAKuF,SAOtBE,UAAY,WAAM,IACRD,EAAkBxF,EAAKJ,MAAvB4F,cACAE,EAAa1F,EAAKS,MAAlBiF,SAEJF,EAAgB,EAClBxF,EAAKY,SAAS,SAAA+E,GAAS,MAAK,CAAEH,cAAeG,EAAUH,cAAgB,MAEvEI,cAAc5F,EAAKuF,OACnBG,yFAXFjE,KAAK8D,MAAQM,YAAYpE,KAAKgE,UAAW,sCAelC,IACCD,EAAkB/D,KAAK7B,MAAvB4F,cACR,OAAO9D,EAAAV,EAAAW,cAACsB,EAAD,CAAcV,OAAO,QAAQC,KAAMgD,WAzBrBvD,aCwCV6D,MApCf,SAAAxE,GAEG,IADD8D,EACC9D,EADD8D,SAAUM,EACTpE,EADSoE,SAAU1C,EACnB1B,EADmB0B,MAAO0B,EAC1BpD,EAD0BoD,aAAcqB,EACxCzE,EADwCyE,QAASvF,EACjDc,EADiDd,KAElD,OAAIuF,EAEArE,EAAAV,EAAAW,cAAA,OAAKqE,MAAO,CAAEC,MAAO,UACnBvE,EAAAV,EAAAW,cAACuE,EAAD,CAAed,SAAUA,IACzB1D,EAAAV,EAAAW,cAACwE,EAAD,CAAYnD,MAAOA,EAAO0C,SAAUA,KAaxChE,EAAAV,EAAAW,cAAA,OAAKqE,MAAO,CAAEC,MAAO,UACnBvE,EAAAV,EAAAW,cAACyE,EAAD,CAAYpD,MAAOA,EAAO0B,aAAcA,IACtCA,EAAa2B,OAAS,GAT1B3E,EAAAV,EAAAW,cAAAD,EAAAV,EAAAsF,SAAA,KACE5E,EAAAV,EAAAW,cAAC4E,EAAD,CAAgB7B,aAAcA,EAAclE,KAAMA,IAClDkB,EAAAV,EAAAW,cAAC6E,EAAD,CAAkB9B,aAAcA,EAAclE,KAAMA,OC0B3CiG,MA7Cf,SAAAnF,GAAgD,IAA1Bd,EAA0Bc,EAA1Bd,KAAMuF,EAAoBzE,EAApByE,QAASW,EAAWpF,EAAXoF,QAC7BnF,EAAc,SAACoF,EAAD5C,GAAkB,IAAZ6C,EAAY7C,EAAZ6C,MACxBF,EAAQE,IAGJC,EAAiB,SAACC,GACtB,OAAIA,EACK,KAEF,SAGHC,EAAuB,UAATvG,EACdwG,EAAuB,UAATxG,EAEpB,OACEkB,EAAAV,EAAAW,cAACsF,EAAA,EAAOvE,MAAR,CAAcwE,KAAK,SACjBxF,EAAAV,EAAAW,cAACsF,EAAA,EAAD,CACEE,QAAS5F,EACTqF,MAAM,QACNQ,QAAQ,QACRC,MAAOR,EAAeE,GACtBlD,OAAQkD,EACRO,UAAWP,EACXQ,UAAWR,GAAehB,IAE5BrE,EAAAV,EAAAW,cAACsF,EAAA,EAAD,CACEE,QAAS5F,EACTqF,MAAM,QACNQ,QAAQ,QACRC,MAAOR,EAAeG,GACtBnD,OAAQmD,EACRM,UAAWN,EACXO,UAAWP,GAAejB,MCmFnByB,6MAjHb9H,MAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,OAE5CC,MAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,OAE5C8H,MAAQ,CAAC,QAAS,WAElB7H,MAAQ,CACNwF,SAAU,EACVpC,MAAO,EACPxC,KAAMR,EAAKyH,MAAM,GACjB1B,SAAS,EACTrB,aAAc,MAGhBgD,oBAAsB,kBAAM1H,EAAK2H,aAAa,MAE9CC,qBAAuB,WAErB,OADqB5H,EAAKJ,MAAlBwF,SACW,EAAIpF,EAAK2H,aAAa,IAAM,KAGjDE,YAAc,SAACC,GAAa,IAClB1C,EAAapF,EAAKJ,MAAlBwF,SACR,MAAiB,UAAb0C,EACK9H,EAAKN,MAAM0F,GAEH,UAAb0C,EACK9H,EAAKL,MAAMyF,QADpB,KAMFsB,QAAU,SAACqB,GAAY,IAAAC,EACKhI,EAAKJ,MAAvBY,EADawH,EACbxH,KAAMuF,EADOiC,EACPjC,QACVgC,IAAYvH,GAAQuF,GAGxB/F,EAAKY,SAAS,CAAEJ,KAAMuH,EAAS/E,MAAO,OAGxC2E,aAAe,SAAAM,GAAG,OAAIC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,OAE5DI,UAAY,WAAM,IAAAC,EACUtI,EAAKJ,MAAvBmG,EADQuC,EACRvC,QAASvF,EADD8H,EACC9H,KACjB,IAAKuF,EAAS,CACZ,IAAMX,EAAWpF,EAAK0H,oBAAoBlH,GAC1CR,EAAKY,SAAS,CAAEwE,WAAUW,SAAS,EAAM/C,MAAO,QAIpD0C,SAAW,WACW1F,EAAKJ,MAAjBmG,SAEN/F,EAAKY,SAAS,SAAA+E,GAAS,MAAK,CAC1BI,SAAS,EACTrB,aAAY,CAAG,CACbV,KAAM,IAAIuE,KACVvF,MAAO2C,EAAU3C,MACjBxC,KAAMmF,EAAUnF,OAHNJ,OAAAc,OAAAsH,EAAA,EAAAtH,CAINyE,EAAUjB,qBAKtBlD,YAAc,SAACiH,GAAW,IAAAC,EACE1I,EAAKJ,MAAvBmG,EADgB2C,EAChB3C,QAASvF,EADOkI,EACPlI,KACjB,GAAKuF,GAGD0C,IAAWzI,EAAK6H,YAAYrH,GAAO,CACrC,IAAM4E,EAAWpF,EAAK4H,qBAAqBpH,GAC3CR,EAAKY,SAAS,SAAA+E,GAAS,MAAK,CAC1BP,WACApC,MAAO2C,EAAU3C,MAAQ,+EAKtB,IAAA2F,EAGHlH,KAAK7B,MADPmG,EAFK4C,EAEL5C,QAAS/C,EAFJ2F,EAEI3F,MAAO0B,EAFXiE,EAEWjE,aAAclE,EAFzBmI,EAEyBnI,KAEhC,OACEkB,EAAAV,EAAAW,cAAA,OAAKqE,MAAO,CAAE4C,QAAS,OAAQC,QAAS,QAASC,oBAAqB,cACpEpH,EAAAV,EAAAW,cAACoH,EAAD,CACEhD,QAASA,EACTL,SAAUjE,KAAKiE,SACf1C,MAAOA,EACP0B,aAAcA,EACdU,SAAU3D,KAAKoG,YAAYrH,GAC3BA,KAAMA,IAERkB,EAAAV,EAAAW,cAAA,OAAKqE,MAAO,CAAE4C,QAAS,OAAQC,QAAS,QAASG,iBAAkB,cACjEtH,EAAAV,EAAAW,cAAA,WACED,EAAAV,EAAAW,cAACsH,EAAA,EAAOC,SAAR,CAAiBC,QAASpD,GACxBrE,EAAAV,EAAAW,cAACsH,EAAA,EAAD,CAAQnC,QAASf,GACfrE,EAAAV,EAAAW,cAACiB,EAAA,EAAD,CAAQC,GAAG,KAAKyE,UAAQ,GAAxB,YAGA5F,EAAAV,EAAAW,cAACsF,EAAA,EAAD,CAAQE,QAAS1F,KAAK4G,UAAWe,SAAO,GAAxC,UAEF1H,EAAAV,EAAAW,cAAC0H,EAAD,CAAe7I,KAAMA,EAAMgB,YAAaC,KAAKD,YAAauE,QAASA,MAGvErE,EAAAV,EAAAW,cAAA,WACED,EAAAV,EAAAW,cAAC2H,EAAD,CAAY9I,KAAMA,EAAMkG,QAASjF,KAAKiF,QAASX,QAASA,cA1GxC9D,2BCUbsH,MAVf,WACE,OACE7H,EAAAV,EAAAW,cAAA,OAAK6H,UAAU,OACb9H,EAAAV,EAAAW,cAAA,UAAQ6H,UAAU,cAChB9H,EAAAV,EAAAW,cAAC8H,EAAD,SCEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtI,EAAAV,EAAAW,cAACsI,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c366f596.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Chessboard from 'chessboardjsx';\nimport PropTypes from 'prop-types';\n\nclass PracticeBoard extends Component {\n  files = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n\n  ranks = ['1', '2', '3', '4', '5', '6', '7', '8'];\n\n  state = {\n    squareStyles: {},\n  }\n\n  getLineSquares = (line) => {\n    if (this.files.includes(line)) {\n      return this.ranks.map(r => `${line}${r}`);\n    }\n    if (this.ranks.includes(line)) {\n      return this.files.map(f => `${f}${line}`);\n    }\n    // TODO: throw error\n  }\n\n  extractLine = (square) => {\n    const { mode } = this.props;\n\n    if (mode === 'files') {\n      return square.charAt(0);\n    }\n    if (mode === 'ranks') {\n      return square.charAt(1);\n    }\n    // TODO: throw error\n  }\n\n  unhighlight = () => {\n    this.setState({ squareStyles: {} });\n  };\n\n  highlight = (square) => {\n    const line = this.extractLine(square);\n    const highlightStyles = this.getLineSquares(line).reduce(\n      (a, c) => ({\n        ...a,\n        ...{\n          [c]: {\n            background: 'rgb(240, 217, 100)',\n          },\n        },\n      }),\n      {},\n    );\n    this.setState(({ squareStyles }) => ({\n      squareStyles: { ...squareStyles, ...highlightStyles },\n    }));\n  };\n\n  handleClick = (square) => {\n    const line = this.extractLine(square);\n    const { checkAnswer } = this.props;\n\n    checkAnswer(line);\n  }\n\n  render() {\n    const { squareStyles } = this.state;\n    return (\n      <div>\n        <Chessboard\n          draggable={false}\n          onMouseOverSquare={this.highlight}\n          onMouseOutSquare={this.unhighlight}\n          onSquareClick={this.handleClick}\n          squareStyles={squareStyles}\n        />\n      </div>\n    );\n  }\n}\n\nPracticeBoard.propTypes = {\n  mode: PropTypes.string.isRequired,\n  checkAnswer: PropTypes.func.isRequired,\n};\n\nexport default PracticeBoard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Header, Segment } from 'semantic-ui-react';\nimport styled from 'styled-components';\n\nconst BigText = styled.div`\n  color: black;\n  margin: 1rem;\n  font-size: 4rem;\n  font-weight: bold;\n`;\n\nfunction DisplayBoard({ header, text }) {\n  return (\n    <Segment.Group>\n      <Segment attached=\"top\">\n        <Header as=\"h2\">{header}</Header>\n      </Segment>\n      <Segment attached=\"bottom\" padded=\"very\">\n        <BigText>{text}</BigText>\n      </Segment>\n    </Segment.Group>\n  );\n}\n\nDisplayBoard.propTypes = {\n  header: PropTypes.string.isRequired,\n  text: PropTypes.oneOfType([PropTypes.string.isRequired, PropTypes.number.isRequired]).isRequired,\n};\n\nexport default DisplayBoard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DisplayBoard from './DisplayBoard';\n\nfunction ScoreBoard({ score }) {\n  return <DisplayBoard header=\"Score\" text={score.toString()} />;\n}\n\nScoreBoard.propTypes = {\n  score: PropTypes.number.isRequired,\n};\n\nexport default ScoreBoard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Header, Segment, Table } from 'semantic-ui-react';\n\nconst dateFormatOptions = {\n  year: 'numeric',\n  month: 'numeric',\n  day: 'numeric',\n  hour: 'numeric',\n  minute: 'numeric',\n  hour12: false,\n};\n\nfunction ScoreTable({ header, data }) {\n  return (\n    <Segment.Group>\n      <Segment attached=\"top\">\n        <Header as=\"h2\">{header}</Header>\n      </Segment>\n      <Segment attached=\"bottom\">\n        <Table basic=\"very\">\n          <Table.Body>\n            {\n              data.map(({ date, score }) => {\n                const dateString = new Intl.DateTimeFormat('default', dateFormatOptions).format(date);\n                return (\n                  <Table.Row key={date}>\n                    <Table.Cell textAlign=\"left\">{dateString}</Table.Cell>\n                    <Table.Cell textAlign=\"right\">{score}</Table.Cell>\n                  </Table.Row>\n                );\n              })\n            }\n          </Table.Body>\n        </Table>\n      </Segment>\n    </Segment.Group>\n  );\n}\n\nScoreTable.propTypes = {\n  header: PropTypes.string.isRequired,\n  data: PropTypes.arrayOf(PropTypes.shape({\n    date: PropTypes.instanceOf(Date),\n    score: PropTypes.number.isRequired,\n  })).isRequired,\n};\n\nexport default ScoreTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ScoreTable from './ScoreTable';\n\nfunction HighScoreBoard({ scoreHistory, mode }) {\n  const filteredScores = scoreHistory.filter(score => score.mode === mode);\n  const sortedScores = filteredScores.sort((a, b) => b.score - a.score);\n  const highScores = sortedScores.slice(0, 3);\n  return <ScoreTable header=\"Recent Scores\" data={highScores} />;\n}\n\nHighScoreBoard.propTypes = {\n  mode: PropTypes.string.isRequired,\n  scoreHistory: PropTypes.arrayOf(PropTypes.shape({\n    mode: PropTypes.string.isRequired,\n    score: PropTypes.number.isRequired,\n  })).isRequired,\n};\n\nexport default HighScoreBoard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ScoreTable from './ScoreTable';\n\nfunction RecentScoreBoard({ mode, scoreHistory }) {\n  const filteredScores = scoreHistory.filter(score => score.mode === mode);\n  const recentScores = filteredScores.slice(0, 3);\n  return <ScoreTable header=\"Recent Scores\" data={recentScores} />;\n}\n\nRecentScoreBoard.propTypes = {\n  mode: PropTypes.string.isRequired,\n  scoreHistory: PropTypes.arrayOf(PropTypes.shape({\n    mode: PropTypes.string.isRequired,\n    score: PropTypes.number.isRequired,\n  })).isRequired,\n};\n\nexport default RecentScoreBoard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DisplayBoard from './DisplayBoard';\n\nfunction QuestionBoard({ question }) {\n  return <DisplayBoard header=\"Question\" text={question.toUpperCase()} />;\n}\n\nQuestionBoard.propTypes = {\n  question: PropTypes.string.isRequired,\n};\n\nexport default QuestionBoard;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport DisplayBoard from './DisplayBoard';\n\nclass TimerBoard extends Component {\n  timer = 30;\n\n  state = {\n    timeRemaining: this.timer,\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(this.countDown, 1000);\n  }\n\n  countDown = () => {\n    const { timeRemaining } = this.state;\n    const { stopGame } = this.props;\n\n    if (timeRemaining > 0) {\n      this.setState(prevState => ({ timeRemaining: prevState.timeRemaining - 1 }));\n    } else {\n      clearInterval(this.timer);\n      stopGame();\n    }\n  }\n\n  render() {\n    const { timeRemaining } = this.state;\n    return <DisplayBoard header=\"Timer\" text={timeRemaining} />;\n  }\n}\n\nTimerBoard.propTypes = {\n  stopGame: PropTypes.func.isRequired,\n};\n\nexport default TimerBoard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ScoreBoard from './ScoreBoard';\nimport HighScoreBoard from './HighScoreBoard';\nimport RecentScoreBoard from './RecentScoreBoard';\nimport QuestionBoard from './QuestionBoard';\nimport TimerBoard from './TimerBoard';\n\nfunction SidePanel({\n  question, stopGame, score, scoreHistory, started, mode,\n}) {\n  if (started) {\n    return (\n      <div style={{ width: '16rem' }}>\n        <QuestionBoard question={question} />\n        <TimerBoard score={score} stopGame={stopGame} />\n      </div>\n    );\n  }\n\n  const historyBoards = () => (\n    <>\n      <HighScoreBoard scoreHistory={scoreHistory} mode={mode} />\n      <RecentScoreBoard scoreHistory={scoreHistory} mode={mode} />\n    </>\n  );\n\n  return (\n    <div style={{ width: '16rem' }}>\n      <ScoreBoard score={score} scoreHistory={scoreHistory} />\n      { scoreHistory.length > 0 && historyBoards() }\n    </div>\n  );\n}\n\nSidePanel.propTypes = {\n  question: PropTypes.string.isRequired,\n  stopGame: PropTypes.func.isRequired,\n  score: PropTypes.number.isRequired,\n  scoreHistory: PropTypes.arrayOf(PropTypes.object).isRequired,\n  started: PropTypes.bool.isRequired,\n  mode: PropTypes.string.isRequired,\n};\n\nexport default SidePanel;\n","import React from 'react';\nimport { Button } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\n\nfunction OptionsBar({ mode, started, setMode }) {\n  const handleClick = (e, { value }) => {\n    setMode(value);\n  };\n\n  const getButtonColor = (active) => {\n    if (active) {\n      return null;\n    }\n    return 'black';\n  };\n\n  const filesActive = mode === 'files';\n  const ranksActive = mode === 'ranks';\n\n  return (\n    <Button.Group size=\"large\">\n      <Button\n        onClick={handleClick}\n        value=\"files\"\n        content=\"Files\"\n        color={getButtonColor(filesActive)}\n        basic={!filesActive}\n        inverted={!filesActive}\n        disabled={!filesActive && started}\n      />\n      <Button\n        onClick={handleClick}\n        value=\"ranks\"\n        content=\"Ranks\"\n        color={getButtonColor(ranksActive)}\n        basic={!ranksActive}\n        inverted={!ranksActive}\n        disabled={!ranksActive && started}\n      />\n    </Button.Group>\n  );\n}\n\nOptionsBar.propTypes = {\n  mode: PropTypes.string.isRequired,\n  started: PropTypes.bool.isRequired,\n  setMode: PropTypes.func.isRequired,\n};\n\nexport default OptionsBar;\n","import React, { Component } from 'react';\nimport { Dimmer, Header, Button } from 'semantic-ui-react';\nimport PracticeBoard from './PracticeBoard';\nimport SidePanel from './SidePanel';\nimport OptionsBar from './OptionsBar';\n\nclass ControlCentre extends Component {\n  files = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n\n  ranks = ['1', '2', '3', '4', '5', '6', '7', '8'];\n\n  modes = ['files', 'ranks'];\n\n  state = {\n    question: 0,\n    score: 0,\n    mode: this.modes[0],\n    started: false,\n    scoreHistory: [],\n  }\n\n  generateNewQuestion = () => this.getRandomInt(8)\n\n  generateNextQuestion = () => {\n    const { question } = this.state;\n    return (question + 1 + this.getRandomInt(7)) % 8;\n  }\n\n  getQuestion = (lineType) => {\n    const { question } = this.state;\n    if (lineType === 'files') {\n      return this.files[question];\n    }\n    if (lineType === 'ranks') {\n      return this.ranks[question];\n    }\n    // TODO: throw error\n  }\n\n  setMode = (newMode) => {\n    const { mode, started } = this.state;\n    if (newMode === mode || started) {\n      return;\n    }\n    this.setState({ mode: newMode, score: 0 });\n  }\n\n  getRandomInt = max => Math.floor(Math.random() * Math.floor(max));\n\n  startGame = () => {\n    const { started, mode } = this.state;\n    if (!started) {\n      const question = this.generateNewQuestion(mode);\n      this.setState({ question, started: true, score: 0 });\n    }\n  }\n\n  stopGame = () => {\n    const { started } = this.state;\n    if (started) {\n      this.setState(prevState => ({\n        started: false,\n        scoreHistory: [{\n          date: new Date(),\n          score: prevState.score,\n          mode: prevState.mode,\n        }, ...prevState.scoreHistory],\n      }));\n    }\n  }\n\n  checkAnswer = (answer) => {\n    const { started, mode } = this.state;\n    if (!started) {\n      return;\n    }\n    if (answer === this.getQuestion(mode)) {\n      const question = this.generateNextQuestion(mode);\n      this.setState(prevState => ({\n        question,\n        score: prevState.score + 1,\n      }));\n    }\n  }\n\n  render() {\n    const {\n      started, score, scoreHistory, mode,\n    } = this.state;\n    return (\n      <div style={{ display: 'grid', gridGap: '1rem ', gridTemplateColumns: 'auto auto' }}>\n        <SidePanel\n          started={started}\n          stopGame={this.stopGame}\n          score={score}\n          scoreHistory={scoreHistory}\n          question={this.getQuestion(mode)}\n          mode={mode}\n        />\n        <div style={{ display: 'grid', gridGap: '1rem ', gridTemplateRows: 'auto auto' }}>\n          <div>\n            <Dimmer.Dimmable dimmed={!started}>\n              <Dimmer active={!started}>\n                <Header as=\"h2\" inverted>\n                  New Game\n                </Header>\n                <Button onClick={this.startGame} primary>Start</Button>\n              </Dimmer>\n              <PracticeBoard mode={mode} checkAnswer={this.checkAnswer} started={started} />\n            </Dimmer.Dimmable>\n          </div>\n          <div>\n            <OptionsBar mode={mode} setMode={this.setMode} started={started} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ControlCentre;\n","import React from 'react';\nimport ControlCentre from './components/ControlCentre';\n\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ControlCentre />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}